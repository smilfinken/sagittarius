# competitions
GET     /                                               controllers.Competitions.list
GET     /competition/list                               controllers.Competitions.list
GET     /competition/show/:competitionId/:tab           controllers.Competitions.show(competitionId: Long, tab: String)
GET     /competition/edit/:competitionId                controllers.Competitions.edit(competitionId: Long)
POST    /competition/save                               controllers.Competitions.save
GET     /competition/printStartlist/:competitionId      controllers.Competitions.printStartlist(competitionId: Long)
GET     /competition/export/:competitionId              controllers.Competitions.export(competitionId: Long)

# stages
GET     /stage/edit/:stageId                            controllers.Competitions.editStage(stageId: Long)
POST    /stage/save                                     controllers.Competitions.saveStage
GET     /stage/delete/:stageId                          controllers.Competitions.deleteStage(stageId: Long)

# auto-generate squads
POST    /competition/generateSquads                     controllers.Competitions.generateSquads

# squads
GET     /squad/edit/:squadId                            controllers.Competitions.editSquad(squadId: Long)
POST    /squad/save                                     controllers.Competitions.saveSquad
GET     /squad/delete/:squadId                          controllers.Competitions.deleteSquad(squadId: Long)
GET     /squad/print/:squadId                           controllers.Competitions.printSquad(squadId: Long)

# teams
GET     /team/edit/:teamId                              controllers.Competitions.editTeam(teamId: Long)
POST    /team/save                                      controllers.Competitions.saveTeam
GET     /team/delete/:teamId                            controllers.Competitions.deleteTeam(teamId: Long)
GET     /team/addCompetitor/:teamId/:competitorId       controllers.Competitions.addCompetitorToTeam(teamId: Long, competitorId: Long)
GET     /team/removeCompetitor/:teamId/:competitorId    controllers.Competitions.removeCompetitorFromTeam(teamId: Long, competitorId: Long)

# competitors
GET     /competitor/add                                 controllers.Competitions.addCompetitor
POST    /competitor/save                                controllers.Competitions.saveCompetitor
POST    /competitor/move                                controllers.Competitions.moveCompetitor
GET     /competitor/remove/:squadId/:competitorId       controllers.Competitions.removeCompetitor(squadId: Long, competitorId: Long)

# results
GET     /results/list/:competitionId                    controllers.Results.list(competitionId: Long)
GET     /results/display/:competitionId                 controllers.Results.display(competitionId: Long)
GET     /results/print/:competitionId                   controllers.Results.print(competitionId: Long)
POST    /results/scoreSquad                             controllers.Results.scoreSquad
GET     /results/edit/:competitorId                     controllers.Results.editResult(competitorId: Long)
GET     /results/delete/:competitorId                   controllers.Results.deleteResult(competitorId: Long)

# users
GET     /user/list                                      controllers.Users.list
GET     /user/edit/:userId                              controllers.Users.edit(userId: Long)
GET     /user/delete/:userId                            controllers.Users.delete(userId: Long)
POST    /user/save                                      controllers.Users.save
GET     /user/export                                    controllers.Users.exportUsers
POST    /user/import                                    controllers.Users.importUsers

# public assets
GET     /assets/*file                                   controllers.Assets.versioned(path="/public", file: Asset)

# testing tools
GET     /competition/generateTestData                   controllers.Competitions.generateTestData
POST    /doLogin    controllers.Secure.doLogin

# security
GET     /login      controllers.Secure.login

# REST API
GET     /api/v1/competitions                                                controllers.RestAPI.listCompetitions
GET     /api/v1/competition/:competitionId                                  controllers.RestAPI.getCompetition(competitionId: Long)
GET     /api/v1/competition/:competitionId/squads                           controllers.RestAPI.getSquads(competitionId: Long)
GET     /api/v1/competition/:competitionId/squad/:squadId                   controllers.RestAPI.getSquad(competitionId: Long, squadId: Long)
GET     /api/v1/competition/:competitionId/squad/:squadId/competitors       controllers.RestAPI.getCompetitors(competitionId: Long, squadId: Long)
GET     /api/v1/competition/:competitionId/stages                           controllers.RestAPI.getStages(competitionId: Long)
GET     /api/v1/competition/:competitionId/stage/:stageId                   controllers.RestAPI.getStage(competitionId: Long, stageId: Long)
POST    /api/v1/competition/:competitionId/competitor/:competitorId/score   controllers.RestAPI.scoreCompetitor(competitionId: Long, competitorId: Long)
